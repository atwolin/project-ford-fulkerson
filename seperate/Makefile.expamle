CC = gcc
CXX = g++
NVCC = nvcc
HIPCC = hipcc
# CUDA directory:
CUDA_ROOT_DIR=/opt/cuda-12.6

##########################################################

## CC COMPILER OPTIONS ##

CC_FLAGS = -lm -O3 -march=native -mavx512f -ffast-math -Iinclude # for ff.cc

##########################################################

## NVCC COMPILER OPTIONS ##

# NVFLAGS = -std=c++11 -O3 -Xptxas="-v" -arch=sm_61
# NVFLAGS = -std=c++11 -O3 -Xptxas="-v" -arch=sm_61 -Xcompiler -mcmodel=medium -Xcompiler \"-Wl,--no-relax\"
NVCC_FLAGS = -std=c++11 -O3 -Xptxas="-v" -arch=sm_61
NVCC_LIBS = -lm

# CUDA library directory:
CUDA_LIB_DIR= -L$(CUDA_ROOT_DIR)/lib64
# CUDA include directory:
CUDA_INC_DIR= -I$(CUDA_ROOT_DIR)/include
# CUDA linking libraries:
CUDA_LINK_LIBS= -lcudart

##########################################################

HIPCCFLAGS = -std=c++11 -O3 --offload-arch=gfx90a

##########################################################

## Project file structure ##
# Source file directory:
SRC_DIR = src
# Object file directory:
OBJ_DIR = bin
# Include header file diretory:
INC_DIR = include

##########################################################

# LDFLAGS = -lm
# EXES = ff
EXE = run_test
OBJS = $(OBJ_DIR)/main.o $(OBJ_DIR)/ff.o

##########################################################

## Compile ##

# Link c++ and CUDA compiled object files to target executable:
$(EXE) : $(OBJS)
	$(CXX) $(CC_FLAGS) $(OBJS) -o $@ $(CUDA_INC_DIR) $(CUDA_LIB_DIR) $(CUDA_LINK_LIBS)

# Compile main .cpp file to object files:
$(OBJ_DIR)/%.o : %.cpp
	$(CXX) $(CC_FLAGS) -c $< -o $@

# Compile C++ source files to object files:
$(OBJ_DIR)/%.o : $(SRC_DIR)/%.cpp include/%.h
	$(CXX) $(CC_FLAGS) -c $< -o $@

# Compile CUDA source files to object files:
$(OBJ_DIR)/%.o : $(SRC_DIR)/%.cu $(INC_DIR)/%.cuh
	$(NVCC) $(NVCC_FLAGS) -c $< -o $@ $(NVCC_LIBS)

# Clean objects in object directory.
clean:
	$(RM) bin/* *.o $(EXE)

# .PHONY: all clean

# all: $(EXES)

# clean:
# 	rm -f $(EXES)

# gen: graph_generator.cc
# 	$(CXX) $(CXXFLAGS) -o $@ $?

# seq: seq.cc
# 	$(CXX) $(CXXFLAGS) -o $@ $?

# ff_v0: ff_v0.cu
# 	$(NVCC) $(NVFLAGS) $(LDFLAGS) -o $@ $?

# ff: ff.cu
# 	$(NVCC) $(NVFLAGS) $(LDFLAGS) -o $@ $?

